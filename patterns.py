import re

patterns_body = [
    #
    # --- НОВЫЕ/ИЗМЕНЁННЫЕ ПАТТЕРНЫ ---
    #
    # A. ФИО + карта на одной строке, разделены пробелом (без двоеточия/тире):
    re.compile(
        r'^(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})\s+(?P<card>RUD[\s\-]*\d{4,})$',
        re.IGNORECASE
    ),
    # B. Карта, затем запятая (или пробелы), затем ФИО:
    re.compile(
        r'^(?P<card>RUD[\s\-]*\d{4,})[,\s]+(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})$',
        re.IGNORECASE
    ),
    # C. Приветствие + карта + ФИО на одной строке (кейс "Добрый день! RUD... ФИО"):
    re.compile(
        r'^(?:.*?(?:Привет|Добрый день|Здравствуйте))\s+'
        r'(?P<card>RUD[\s\-]*\d{4,})\s+'
        r'(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})$',
        re.IGNORECASE
    ),
    # D. Карта на одной строке, ФИО на следующей (с учётом возможных пустых строк между ними):
    re.compile(
        r'^(?P<card>RUD[\s\-]*\d{4,})(?:\s*\n\s*)+(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})$',
        re.IGNORECASE | re.MULTILINE
    ),
    # E. ФИО на одной строке, карта на следующей (с учётом возможных пустых строк между ними):
    re.compile(
        r'^(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})(?:\s*\n\s*)+'
        r'(?P<card>RUD[\s\-]*\d{4,})$',
        re.IGNORECASE | re.MULTILINE
    ),
    re.compile(
        r'^(?P<card>RUD[\s\-]*\d{4,})(?:\s*\n\s*)+(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})$',
        re.IGNORECASE | re.MULTILINE
    ),
    re.compile(
        r'^(?:.*?(?:Привет|Добрый\s*день!?|Здравствуйте))\s+'
        r'(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})\s+'
        r'(?P<card>RUD[\s\-]*\d{4,})$',
        re.IGNORECASE
    ),

    #
    # --- СТАРЫЕ (НО ЧУТЬ ПОДПРАВЛЕННЫЕ) ПАТТЕРНЫ ---
    #
    # 1. ФИО и номер карты, разделённые двоеточием или тире
    re.compile(
        r'^(?P<name>[А-ЯЁ][а-яё]{1,30}(?: [А-ЯЁ][а-яё]{1,30}){0,2})\s*[:\-—]\s*'
        r'(?P<card>RUD[\s\-]*\d{4,})',
        re.IGNORECASE
    ),
    # 2. Номер карты и ФИО, разделённые двоеточием или тире
    re.compile(
        r'^(?P<card>RUD[\s\-]*\d{4,})\s*[:\-—]\s*'
        r'(?P<name>[А-ЯЁ][а-яё]{1,30}(?: [А-ЯЁ][а-яё]{1,30}){0,2})',
        re.IGNORECASE
    ),
    # 3. Номер карты в кавычках или скобках (убрали ? из *?; используем жадный * - достаточно)
    re.compile(
        r'^[("«]*(?P<card>RUD[\s\-]*\d{4,})[)"»]*$',
        re.IGNORECASE
    ),
    # 4. ФИО в кавычках или скобках (аналогично убрали *?)
    re.compile(
        r'^[("«]*(?P<name>[А-ЯЁ][а-яё]{1,30}(?: [А-ЯЁ][а-яё]{1,30}){1,2})[)"»]*$',
        re.IGNORECASE
    ),
    # 5. ФИО и номер карты в скобках или кавычках
    re.compile(
        r'^[("«]*(?P<name>[А-ЯЁ][а-яё]{1,30}(?: [А-ЯЁ][а-яё]{1,30}){0,2})[)"»]*'
        r'\s*[:\-—]?\s*[("«]*'
        r'(?P<card>RUD[\s\-]*\d{4,})[)"»]*$',
        re.IGNORECASE
    ),
    # 6. Номер карты, содержащий пробелы или дефисы в середине
    re.compile(
        r'(?P<card>RUD[\s\-]*\d{4}[\s\-]*\d{4}[\s\-]*\d{4,})',
        re.IGNORECASE
    ),
    # 7. ФИО с инициалами
    re.compile(
        r'^(?P<name>[А-ЯЁ][а-яё]{1,30}(?:\s+[А-ЯЁ]\.[А-ЯЁ]\.)?)$',
        re.IGNORECASE
    ),
    # 8. Текст перед номером карты (заменили (Карта|Номер карты) на (?:Карта|Номер карты))
    re.compile(
        r'^.*?(?:Карта|Номер карты)\s*[:\-—]?\s*'
        r'(?P<card>RUD[\s\-]*\d{4,}).*$',
        re.IGNORECASE
    ),
    # 9. Текст перед ФИО (аналогично)
    re.compile(
        r'^.*?(?:ФИО|Имя)\s*[:\-—]?\s*'
        r'(?P<name>[А-ЯЁ][а-яё]{1,30}(?: [А-ЯЁ][а-яё]{1,30}){0,2}).*$',
        re.IGNORECASE
    ),
    # 10. Строка только с номером карты
    re.compile(
        r'^(?P<card>RUD[\s\-]*\d{4,})$',
        re.IGNORECASE
    ),
    # 11. Строка только с ФИО
    re.compile(
        r'^(?P<name>[А-ЯЁ][а-яё]{2,30}(?: [А-ЯЁ][а-яё]{2,30}){1,2})$',
        re.IGNORECASE
    ),
    # 12. Строка с приветствием -> (перенос) Карта -> (перенос) ФИО
    #    (оставили как есть, если приветствие, карта и фио идут каждые на своей строке)
    re.compile(
        r'^.*?(?:Привет|Добрый день|Здравствуйте).*?\n\s*'
        r'(?P<card>RUD[\s\-]*\d{10,})\s*\n\s*'
        r'(?P<name>[А-ЯЁ][а-яё]{1,30}(?: [А-ЯЁ][а-яё]{1,30}){1,2})\s*$',
        re.IGNORECASE | re.MULTILINE
    ),
    re.compile(
        r'^(?P<card>RUD[\s\-]*\d{4,})(?:\s*\n\s*)+(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})$',
        re.IGNORECASE | re.MULTILINE
    ),
    # 13. Карта (>=10 цифр) + ФИО (как раньше)
    re.compile(
        r'^(?P<card>RUD\d{10,})[,\s]*?(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})$',
        re.IGNORECASE
    ),
    # 14. ФИО и карта на разных строках (конкретная версия без пустых строк)
    re.compile(
        r'^(?P<card>RUD[\s\-]*\d{4,})\s*\n\s*'
        r'(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})$',
        re.IGNORECASE | re.MULTILINE
    ),
    re.compile(
        r'^(?P<name>[А-ЯЁ][а-яё]+(?: [А-ЯЁ][а-яё]+){1,2})\s*\n\s*'
        r'(?P<card>RUD[\s\-]*\d{4,})$',
        re.IGNORECASE | re.MULTILINE
    ),
]
